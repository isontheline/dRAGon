{"searchDocs":[{"title":"What's a Silo?","type":0,"sectionRef":"#","url":"/docs/about-dragon/glossary/silo","content":"","keywords":"","version":"Next"},{"title":"How does it work?â€‹","type":1,"pageTitle":"What's a Silo?","url":"/docs/about-dragon/glossary/silo#how-does-it-work","content":" The Ingestor Loader is responsible for loading the documents into the Silo : it can be done by reading files in a directory or by providing URLs. After the documents are loaded they are split into chunks (eg. paragraphs, sentences, etc.) by the Silo Splitter. Each chunk is then transformed into a vector by the Embedding Model, which is then stored in the Vector Store for later retrieval.  ","version":"Next","tagName":"h2"},{"title":"What's a Farm?","type":0,"sectionRef":"#","url":"/docs/about-dragon/glossary/farm","content":"What's a Farm? In dRAGon land, a Farm is a collection of Silos : note You can aggregate multiple kind of Silos in a Farm, for example, you can have a Silo for your documents about your products, another Silo for your blog posts (extracted from URLs of a WordPress blog), and another Silo for Frequently Asked Questions (FAQs).There is no limit to the number of Silos you can have in a Farm, but you should keep in mind that the more Silos you have, the more time it will take to process the requests.","keywords":"","version":"Next"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/api/introduction","content":"","keywords":"","version":"Next"},{"title":"OpenAPIâ€‹","type":1,"pageTitle":"Introduction","url":"/docs/api/introduction#openapi","content":" ","version":"Next","tagName":"h2"},{"title":"Swagger UIâ€‹","type":1,"pageTitle":"Introduction","url":"/docs/api/introduction#swagger-ui","content":" When dRAGon is launched, the API documentation is available here : http://localhost:1985/api/swagger-ui/index.html  ","version":"Next","tagName":"h3"},{"title":"Specificationâ€‹","type":1,"pageTitle":"Introduction","url":"/docs/api/introduction#specification","content":" Documentationâ€‹  API Endpoints  Spec Filesâ€‹  AppBackendRaaGRag ","version":"Next","tagName":"h3"},{"title":"About dRAGon","type":0,"sectionRef":"#","url":"/docs/about-dragon/","content":"","keywords":"","version":"Next"},{"title":"Technical Stackâ€‹","type":1,"pageTitle":"About dRAGon","url":"/docs/about-dragon/#technical-stack","content":" ","version":"Next","tagName":"h2"},{"title":"Backendâ€‹","type":1,"pageTitle":"About dRAGon","url":"/docs/about-dragon/#backend","content":" Java 17Spring Boot 3 / Spring Framework 6LangChain4jNitrite  ","version":"Next","tagName":"h3"},{"title":"Frontendâ€‹","type":1,"pageTitle":"About dRAGon","url":"/docs/about-dragon/#frontend","content":" Vue.js 3VitePrimeVue  ","version":"Next","tagName":"h3"},{"title":"Otherâ€‹","type":1,"pageTitle":"About dRAGon","url":"/docs/about-dragon/#other","content":" DockerDev Container ","version":"Next","tagName":"h3"},{"title":"dRAGon Development Mode","type":0,"sectionRef":"#","url":"/docs/contributing/launch-dragon-dev","content":"","keywords":"","version":"Next"},{"title":"Clone Repositoryâ€‹","type":1,"pageTitle":"dRAGon Development Mode","url":"/docs/contributing/launch-dragon-dev#clone-repository","content":" git clone https://github.com/dRAGon-Okinawa/dRAGon   ","version":"Next","tagName":"h2"},{"title":"Prepare Dependenciesâ€‹","type":1,"pageTitle":"dRAGon Development Mode","url":"/docs/contributing/launch-dragon-dev#prepare-dependencies","content":" gradle npmInstall build   ","version":"Next","tagName":"h2"},{"title":"Launching dRAGonâ€‹","type":1,"pageTitle":"dRAGon Development Mode","url":"/docs/contributing/launch-dragon-dev#launching-dragon","content":" gradle bootRun  ","version":"Next","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/docs/getting-started","content":"","keywords":"","version":"Next"},{"title":"dRAGon Startup Guideâ€‹","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#dragon-startup-guide","content":" danger dRAGon lacks of authentication and authorization mechanisms. It is not recommended to expose it to the internet or unsafe networks. These mechanisms will be implemented in a near future.  warning dRAGon is still in active development stage and may contain bugs or incomplete features. No smooth upgrade path is guaranteed between versions. Can be broken at any time.  ","version":"Next","tagName":"h2"},{"title":"1. Launchâ€‹","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#1-launch","content":" note The best way to run dRAGon is to use Docker. If you want to run it without Docker, you can use Gradle and follow dRAGon Development Mode.  docker run --rm -p 1985:1985 -v $(pwd)/data:/data -v $(pwd)/documents:/documents --name dRAGon ghcr.io/dragon-okinawa/dragon:latest   info /data and /documents are optional volumes to mount. You can mount any directory you want! /data is used to store the dRAGon databas and settings. If you want to keep your data between reboots, you should mount this volume./documents is used here to store the documents to be indexed inside the vector store (eg. by using FileSystem Ingestor).  ","version":"Next","tagName":"h3"},{"title":"2. Accessâ€‹","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#2-access","content":" Open your browser and go to http://localhost:1985.  ","version":"Next","tagName":"h3"},{"title":"3. Configureâ€‹","type":1,"pageTitle":"Getting Started","url":"/docs/getting-started#3-configure","content":" ðŸš§Work In Progress This section lacks useful information. It is a work in progress and will be updated soon. ","version":"Next","tagName":"h3"},{"title":"Database Export","type":0,"sectionRef":"#","url":"/docs/commands/database-export","content":"","keywords":"database export dump backup json nitrite","version":"Next"},{"title":"Online Exportâ€‹","type":1,"pageTitle":"Database Export","url":"/docs/commands/database-export#online-export","content":" To export the database while the backend server is running, use the following API endpoint:  curl -X 'POST' 'http://localhost:1985/api/backend/command/database/export'   ","version":"Next","tagName":"h2"},{"title":"Offline Exportâ€‹","type":1,"pageTitle":"Database Export","url":"/docs/commands/database-export#offline-export","content":" info This command should only be used when the backend server is offline. Running this command while the backend server is running may not work as the database could be locked. To export the database while the backend server is running, use the API endpoint provided above.  ","version":"Next","tagName":"h2"},{"title":"Using Gradleâ€‹","type":1,"pageTitle":"Database Export","url":"/docs/commands/database-export#using-gradle","content":" gradle bootRun --args=&quot;--command=database-export --output=/path/to/dump.json&quot;   ","version":"Next","tagName":"h3"},{"title":"Using Javaâ€‹","type":1,"pageTitle":"Database Export","url":"/docs/commands/database-export#using-java","content":" java -jar backend.jar --command=database-export --output=/path/to/dump.json  ","version":"Next","tagName":"h3"},{"title":"LibreChat","type":0,"sectionRef":"#","url":"/docs/integrations/librechat","content":"","keywords":"","version":"Next"},{"title":"As an AI Endpoint (OpenAI compatible)â€‹","type":1,"pageTitle":"LibreChat","url":"/docs/integrations/librechat#as-an-ai-endpoint-openai-compatible","content":" endpoints: custom: - name: &quot;dRAGon&quot; apiKey: &quot;YOUR_API_KEY&quot; baseURL: &quot;http://localhost:1985/api/raag/v1&quot; models: default: [&quot;your-raag-model-name&quot;] fetch: true titleConvo: true titleModel: &quot;your-raag-model-name&quot; titleMethod: &quot;completion&quot; modelDisplayLabel: &quot;dRAGon&quot; iconURL: &quot;https://dragon.okinawa/img/dragon_okinawa_icon.png&quot;   ","version":"Next","tagName":"h2"},{"title":"As a LangChain.js Pluginâ€‹","type":1,"pageTitle":"LibreChat","url":"/docs/integrations/librechat#as-a-langchainjs-plugin","content":" ðŸš§Work In Progress This section lacks useful information. It is a work in progress and will be updated soon.  ","version":"Next","tagName":"h2"},{"title":"As an OpenAPI Pluginâ€‹","type":1,"pageTitle":"LibreChat","url":"/docs/integrations/librechat#as-an-openapi-plugin","content":" ðŸš§Work In Progress This section lacks useful information. It is a work in progress and will be updated soon. ","version":"Next","tagName":"h2"},{"title":"Roadmap","type":0,"sectionRef":"#","url":"/docs/roadmap","content":"Roadmap RaaG : RAG as a GPT Multi-Modal Input Sources Vector Ingestors Local Files Web URLs SQL Database NFS Mount S3 Bucket SMB / CIFS Mount Git Live / Direct Ingestors Web Search API Endpoints SQL Query SQL Query Generator Documents Types Text : Plain / PDF / Word Presentations : PowerPoint Spreadsheets : Excel / CSV Images : PNG / JPEG / GIF Audio : MP3 / WAV Video : MP4 / AVI","keywords":"","version":"Next"},{"title":"What's RaaG?","type":0,"sectionRef":"#","url":"/docs/about-dragon/glossary/raag","content":"","keywords":"","version":"Next"},{"title":"Why do we need dRAGon RaaG?â€‹","type":1,"pageTitle":"What's RaaG?","url":"/docs/about-dragon/glossary/raag#why-do-we-need-dragon-raag","content":" You can already use LangChain or LlamaIndex to query your data, so why do you need RaaG?  As you know, a typical RAG application is composed of two main components with each several sub-tasks :  Indexing: This involves the offline process of ingesting data from a source and indexing it. Load: The data is loaded using Document Loaders.Split: The loaded data is divided into smaller chunks using Document Splitters.Store: The chunks are stored and indexed for future searching, typically utilizing a VectorStore and an Embeddings model. Retrieval and Generation: This is the core RAG chain that operates during runtime, handling user queries. Retrieve: Relevant data chunks are fetched from the storage in response to a user query using a Retriever.Generate: A ChatModel/LLM generates an answer by incorporating the user query and the retrieved data into a prompt.  Let's say you want to build a RAG pipeline using LangChain: You would need to write code to handle each of these sub-tasks, which can be quite complex and time-consuming.  ","version":"Next","tagName":"h2"},{"title":"How does dRAGon RaaG simplify the process?â€‹","type":1,"pageTitle":"What's RaaG?","url":"/docs/about-dragon/glossary/raag#how-does-dragon-raag-simplify-the-process","content":" So instead of having an app code like this :  from langchain import hub from langchain_postgres.vectorstores import PGVector from langchain_community.document_loaders import WebBaseLoader from langchain_core.output_parsers import StrOutputParser from langchain_core.runnables import RunnablePassthrough from langchain_openai import OpenAIEmbeddings from langchain_text_splitters import RecursiveCharacterTextSplitter from langchain_openai import ChatOpenAI os.environ[&quot;OPENAI_API_KEY&quot;] = &quot;YOUR_API_KEY&quot; loader = WebBaseLoader( web_paths=(&quot;https://dragon.okinawa&quot;) ) docs = loader.load() text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50) splits = text_splitter.split_documents(docs) connection = &quot;postgresql+psycopg://user:paswword@server:5433/vectors&quot; collection_name = &quot;my_rag_chunks&quot; embeddings = OpenAIEmbeddings() vectorstore = PGVector( embeddings=embeddings, collection_name=collection_name, connection=connection, use_jsonb=True, ) retriever = vectorstore.as_retriever() prompt = hub.pull(&quot;rlm/rag-prompt&quot;) def format_docs(docs): return &quot;\\n\\n&quot;.join(doc.page_content for doc in docs) llm = ChatOpenAI(model=&quot;gpt-4o&quot;) rag_chain = ( {&quot;context&quot;: retriever | format_docs, &quot;question&quot;: RunnablePassthrough()} | prompt | llm | StrOutputParser() ) rag_chain.invoke(&quot;What's dRAGon?&quot;)   You will simply use the following code with a dRAGon powered RAG pipeline :  from langchain_openai import OpenAI llm = OpenAI( model_name=&quot;your-dragon-raag-farm-name&quot;, openai_api_base=&quot;http://your.dragon.host:1985/api/raag/v1&quot;, ) prompt = &quot;What's dRAGon?&quot; llm.invoke(prompt)   dRAGon simplifies the process of building a RAG pipeline by providing a single interface to manage all these components by providing an OpenAI API compliant endpoint to interact with your RAG pipeline.  ","version":"Next","tagName":"h2"},{"title":"Components involved in dRAGon RaaGâ€‹","type":1,"pageTitle":"What's RaaG?","url":"/docs/about-dragon/glossary/raag#components-involved-in-dragon-raag","content":"   ","version":"Next","tagName":"h2"},{"title":"Tutorialsâ€‹","type":1,"pageTitle":"What's RaaG?","url":"/docs/about-dragon/glossary/raag#tutorials","content":" LangChain : Chat with a FarmFAQ : SQL Ingestor as a RAG Data Provider ","version":"Next","tagName":"h2"},{"title":"FAQ : SQL Ingestor as a RAG Data Provider","type":0,"sectionRef":"#","url":"/docs/tutorials/raag-api/raag-faq-sql-ingestor","content":"FAQ : SQL Ingestor as a RAG Data Provider ðŸš§Work In Progress This section lacks useful information. It is a work in progress and will be updated soon.","keywords":"tutorial raag rag api silo farm chat faq langchain python","version":"Next"},{"title":"LangChain : Chat with a Farm","type":0,"sectionRef":"#","url":"/docs/tutorials/raag-api/raag-api-farm-chat-python-langchain-client","content":"","keywords":"tutorial raag api silo farm chat langchain python","version":"Next"},{"title":"Setup a Siloâ€‹","type":1,"pageTitle":"LangChain : Chat with a Farm","url":"/docs/tutorials/raag-api/raag-api-farm-chat-python-langchain-client#setup-a-silo","content":" Follow the tutorial to setup a Silo through API.  ","version":"Next","tagName":"h2"},{"title":"Setup a Farmâ€‹","type":1,"pageTitle":"LangChain : Chat with a Farm","url":"/docs/tutorials/raag-api/raag-api-farm-chat-python-langchain-client#setup-a-farm","content":" ","version":"Next","tagName":"h2"},{"title":"Chat with the Farmâ€‹","type":1,"pageTitle":"LangChain : Chat with a Farm","url":"/docs/tutorials/raag-api/raag-api-farm-chat-python-langchain-client#chat-with-the-farm","content":"","version":"Next","tagName":"h2"},{"title":"N8N","type":0,"sectionRef":"#","url":"/docs/integrations/n8n","content":"N8N ðŸš§Work In Progress This section lacks useful information. It is a work in progress and will be updated soon.","keywords":"","version":"Next"},{"title":"Create and Query a Silo","type":0,"sectionRef":"#","url":"/docs/tutorials/rag-api/rag-api-create-query-silo","content":"","keywords":"tutorial rag api silo create query","version":"Next"},{"title":"Create a Siloâ€‹","type":1,"pageTitle":"Create and Query a Silo","url":"/docs/tutorials/rag-api/rag-api-create-query-silo#create-a-silo","content":" ","version":"Next","tagName":"h2"},{"title":"Index a directoryâ€‹","type":1,"pageTitle":"Create and Query a Silo","url":"/docs/tutorials/rag-api/rag-api-create-query-silo#index-a-directory","content":" ","version":"Next","tagName":"h2"},{"title":"Query a Siloâ€‹","type":1,"pageTitle":"Create and Query a Silo","url":"/docs/tutorials/rag-api/rag-api-create-query-silo#query-a-silo","content":"","version":"Next","tagName":"h2"}],"options":{"excludeRoutes":["/docs/api/specification/**"],"id":"default"}}